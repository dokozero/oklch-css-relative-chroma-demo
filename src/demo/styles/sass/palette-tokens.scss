@use 'sass:map';
@use './constants';

@mixin tokens($hue, $color-name, $chroma-type) {
  $lightness: constants.$lightness-min-value;

  $gamut: '';
  $chroma-value-string: '';
  $chroma-token-string: '';

  @if ($chroma-type == 'rc') {
    $gamut: constants.$gamut;
    $chroma-value-string: #{constants.$relative-chroma} + '%';
    $chroma-token-string: #{$chroma-type}#{constants.$relative-chroma};
  } @else if ($chroma-type == 'ac') {
    $chroma-value-string: #{constants.$absolute-chroma};
    $chroma-token-string: #{$chroma-type}#{constants.$absolute-chroma-string};
  }

  @while $lightness <= constants.$lightness-max-value {
    // prettier-ignore
    --b__color__#{$color-name}__#{$chroma-token-string}__#{$lightness}: oklch(#{$gamut} #{$lightness}% #{$chroma-value-string} #{$hue});
    $lightness: $lightness + constants.$lightness-steps;
  }

  // prettier-ignore
  --b__color__#{$color-name}__#{$chroma-token-string}__95: oklch(#{$gamut} 95% #{$chroma-value-string} #{$hue});
}

:root {
  @each $hue, $color-name in constants.$color-names {
    @include tokens($hue, $color-name, 'rc');
  }

  @each $hue, $color-name in constants.$color-names {
    @include tokens($hue, $color-name, 'ac');
  }
}
