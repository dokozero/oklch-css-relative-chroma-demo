@use 'sass:map';
@use './data';

:root {
  $hue-current-value: data.$hue-start-value;

  @while $hue-current-value <= 350 {
    $lightness-current-value: data.$lightness-min-value;

    @while $lightness-current-value <= data.$lightness-max-value {
      // prettier-ignore
      --b__color__#{map.get(data.$color-names, $hue-current-value)}__rc#{data.$relative-chroma}__#{$lightness-current-value}: oklch(#{data.$color-space} #{$lightness-current-value}% #{data.$relative-chroma}% #{$hue-current-value});

      $lightness-current-value: $lightness-current-value + data.$lightness-steps;
    }

    $hue-current-value: $hue-current-value + data.$hue-steps;
  }

  // Reset hue loop value.
  $hue-current-value: data.$hue-start-value;

  @while $hue-current-value <= 350 {
    $lightness-current-value: data.$lightness-min-value;

    @while $lightness-current-value <= data.$lightness-max-value {
      // We block prettier here as it would ad line breaks to the oklch() color, thus making the postcss plugin not working.
      // prettier-ignore
      --b__color__#{map.get(data.$color-names, $hue-current-value)}__ac#{data.$absolute-chroma-string}__#{$lightness-current-value}: oklch(#{$lightness-current-value}% #{data.$absolute-chroma} #{$hue-current-value});

      $lightness-current-value: $lightness-current-value + data.$lightness-steps;
    }

    $hue-current-value: $hue-current-value + data.$hue-steps;
  }
}
